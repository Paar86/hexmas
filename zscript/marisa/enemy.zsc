Class mkSnowEttin : Ettin
{
	Default
	{
		//$Title Snow Ettin
		//$Sprite ETTNA1
		//$Category Marisa/Monsters
		Translation "81:145=%[0.00,0.00,0.00]:[1.73,1.73,2.00]", "246:254=%[0.00,0.00,0.00]:[1.73,1.73,2.00]", "2:32=122:145", "33:50=122:145", "51:51=125:125";
		DamageFactor "Ice", 0.5;
		DamageFactor "Fire", 1.5;
		Tag "Snow Ettin";
		Obituary "%o was smashed by a Snow Ettin.";
		Scale 1.2;
		Health 320;
		Speed 15;
		Radius 30;
		Height 80;
		MinMissileChance 100;
		MissileHeight 40;
		+MISSILEMORE;
	}
	action void A_SnowEttinAttack()
	{
		if ( !target ) return;
		A_PlaySound("FireDemonAttack",CHAN_WEAPON);
		let p = Spawn("mkIcyPoof",Vec3Angle(radius/2,angle,missileheight));
		p.angle = AngleTo(target);
		let a = SpawnMissile(target,"mkIcyShards");
		if ( a )
		{
			a.pitch = BulletSlope();
			a.args[0] = 9;
			a.args[1] = 18;
			a.args[2] = 6;
		}
	}
	States
	{
	Missile:
		ETTN EF 6 A_FaceTarget;
		ETTN G 4 A_PlaySound("FighterHammerMiss");
		ETTN G 4 A_SnowEttinAttack();
		Goto See;
	Ice:
		TNT1 A 0 { Translation = 0; }
		Goto Super::Ice;
	}
}

Class mkIceDemon : Demon2
{
	Default
	{
		//$Title Ice Serpent
		//$Sprite DEM2A1
		//$Category Marisa/Monsters
		Translation "81:96=67:80", "97:121=67:80", "122:145=67:80", "164:185=146:163";
		DamageFactor "Ice", 0.3;
		DamageFactor "Fire", 2.0;
		BloodColor "Blue";
		HitObituary "%o got too close to an Ice Serpent.";
		Obituary "%o was cryogenized by an Ice Serpent.";
		Tag "Ice Serpent";
		Health 400;
		Scale 1.5;
		Speed 16;
		Radius 48;
		Height 96;
		+NOICEDEATH;
	}
	States
	{
	Missile:
		DEM2 E 5 A_FaceTarget();
		DEM2 F 6 A_FaceTarget();
		DEM2 G 5
		{
			A_PlaySound("MageShardsFire",CHAN_WEAPON);
			Actor mo = A_SpawnProjectile("FrostMissile",62,0);
			if ( mo )
			{
				mo.pitch = BulletSlope();
				mo.special1 = FrostMissile.SHARDSPAWN_LEFT|FrostMissile.SHARDSPAWN_DOWN|FrostMissile.SHARDSPAWN_UP|FrostMissile.SHARDSPAWN_RIGHT;
				mo.special2 = 2;
				mo.args[0] = 3;
			}
		}
		Goto See;
	}
}

Class mkIcyShards : Actor
{
	Default
	{
		Speed 1;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		Args 3, 6, 4;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		for ( int i=0; i<args[0]; i++ )
		{
			let a = Spawn("mkIcyShard",pos);
			a.target = target;
			a.angle = angle+FRandom[Apprentice](-args[1],args[1]);
			a.pitch = pitch+FRandom[Apprentice](-args[2],args[2]);
			a.vel = (cos(a.angle)*cos(a.pitch),sin(a.angle)*cos(a.pitch),-sin(a.pitch))*a.speed*FRandom[Apprentice](0.8,1.2);
			a.vel.z += 1.1;
		}
		Destroy();
	}
}

Class mkIcyPoof : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+THRUACTORS;
		+NOTELEPORT;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( target ) angle = target.angle;
	}
	States
	{
	Spawn:
	Death:
		TNT1 AAAA 1
		{
			for ( int i=0; i<3; i++ )
			{
				Vector3 smk = (cos(angle),sin(angle),0)*FRandom[Apprentice](1.2,4.8);
				smk += (FRandom[Apprentice](-1.2,1.2),FRandom[Apprentice](-1.2,1.2),FRandom[Apprentice](-1.2,1.2));
				let a = Spawn("mkIcyPoof2",pos);
				a.vel = smk;
			}
		}
		Stop;
	}
}

Class mkIcyPoof2 : Actor
{
	Default
	{
		RenderStyle "Translucent";
		Alpha 0.2;
		Scale 0.8;
		Radius 2;
		Height 2;
		Translation "0:255=%[0.40,0.40,0.40]:[1.20,1.20,1.20]";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+THRUACTORS;
		+NOTELEPORT;
	}
	States
	{
	Spawn:
	Death:
		SHEX ABCDE 5;
		Stop;
	}
}

Class mkIcyShard : Actor
{
	Default
	{
		Scale 0.4;
		Speed 25;
		Radius 2;
		Height 2;
		Translation "0:255=%[0.40,0.40,0.40]:[1.20,1.20,1.20]";
		DamageFunction Random[Apprentice](1,3);
		DamageType "Ice";
		PROJECTILE;
		-NOGRAVITY;
		Gravity 0.125;
		DeathSound "MageShardsExplode";
	}
	States
	{
	Spawn:
		SHRD ABC 3 Bright;
		Loop;
	Death:
		SHEX A 0 A_NoGravity();
		SHEX ABCDE 5 Bright;
		Stop;
	}
}

Class mkElderApprentice : Actor
{
	int bcnt;
	Default
	{
		//$Title Elder Apprentice
		//$Category Marisa/Monsters
		Translation "0:255=#[102,102,102]", "146:163=[0,0,0]:[49,122,73]", "0:32=[0,0,0]:[49,122,73]", "231:239=33:50", "164:185=231:239", "186:202=231:239", "51:66=231:239";
		Health 150;
		PainChance 150;
		Speed 10;
		Radius 16;
		Height 64;
		MONSTER;
		+FLOORCLIP;
		Obituary "%o felt the cold touch of an Elder Apprentice.";
		Tag "Elder Apprentice";
		SeeSound "apprentice/see";
		BloodColor "Purple";
	}
	override void Tick()
	{
		Super.Tick();
		if ( bDORMANT || (Health <= 0) ) return;
		if ( --bcnt <= 0 )
		{
			bcnt = 50;
			double vol = bAMBUSH?0.15:0.5;
			A_PlaySound("apprentice/active",CHAN_5,vol,attenuation:4.0);
		}
	}
	action void A_ApprenticeAttack()
	{
		A_PlaySound("FireDemonAttack",CHAN_WEAPON);
		if ( !target ) return;
		SpawnMissileXYZ(Vec3Angle(radius*1.5,angle+40,48.),target,"mkIcyPoof",false);
		SpawnMissileXYZ(Vec3Angle(radius*1.5,angle-40,48.),target,"mkIcyPoof",false);
		if ( (Distance3D(target) < MeleeRange*2.4) && abs(deltaangle(angle,AngleTo(target))) < 60 )
		{
			int dmg = Random[Apprentice](4,5)*3;
			target.DamageMobj(self,self,dmg,'Ice');
			target.vel += Vec3To(target).unit()*6;
			target.vel.z += 2.;
			return;
		}
	}
	action bool CheckDoor()
	{
		FLineTraceData d;
		LineTrace(angle,radius*speed,0,TRF_THRUACTORS,50.,data:d);
		if ( d.HitType != TRACE_HitWall ) return false;
		if ( d.HitLine.Activation&SPAC_MUse )
		{
			d.HitLine.Activate(self,d.LineSide,SPAC_Use);
			return true;
		}
		return false;
	}
	action bool CheckDoorMove()
	{
		FLineTraceData d;
		LineTrace(angle,radius*speed,0,TRF_THRUACTORS,height,data:d);
		if ( (d.HitType == TRACE_HitWall) && d.HitLine.Activation&SPAC_MUse ) return false;
		return true;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( score == 1 ) SetStateLabel("LookMirror");
	}
	States
	{
	Spawn:
		MAGE A 2 A_Look();
		Wait;
	LookMirror:
		MAGE A 2
		{
			A_Look();
			A_LookEx(0,0,200,0,360);
		}
		Wait;
	See:
		MAGE AABBCCDD 2
		{
			A_Chase();
			return A_JumpIf(CheckDoor(),"WaitDoor");
		}
		Loop;
	WaitDoor:
		MAGE A 2 A_JumpIf(CheckDoorMove(),"See");
		Wait;
	Melee:
		MAGE E 0 A_FaceTarget();
		MAGE EEE 4 A_FaceTarget(30);
		MAGE F 8 A_ApprenticeAttack();
		MAGE E 4;
		Goto See;
	Pain:
		MAGE G 4;
		MAGE G 4 A_PlaySound("apprentice/pain");
		Goto See;
	Death:
		MAGE H 6;
		MAGE I 6 A_PlaySound("apprentice/death");
		MAGE JK 6;
		MAGE L 6 A_NoBlocking();
		MAGE M 6 A_QueueCorpse();
		MAGE N -1;
		Stop;
	Raise:
		MAGE N 4 A_PlaySound("apprentice/htaed");
		MAGE MLKJIH 4;
		Goto See;
	XDeath:
		MAGE O 5 A_PlaySound("apprentice/xdeath");
		MAGE P 5;
		MAGE R 5 A_NoBlocking();
		MAGE STUV 5;
		MAGE W 5 A_QueueCorpse();
		MAGE X -1;
		Stop;
	Ice:
		TNT1 A 0 { Translation = 0; }
		MAGE Y 5 A_FreezeDeath();
		MAGE Y 1 A_FreezeDeathChunks();
		Wait;
	}
}

Class mkSmokePoof : Actor
{
	Default
	{
		RenderStyle "Translucent";
		Radius 2;
		Height 2;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+FORCEXYBILLBOARD;
		+THRUACTORS;
		Scale 1.8;
		Alpha 0.5;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		double ang, pt;
		scale *= FRandom[Puff](0.5,1.0);
		alpha *= FRandom[Puff](0.5,1.0);
		ang = FRandom[Puff](0,360);
		pt = FRandom[Puff](-90,90);
		vel = (cos(pt)*cos(ang),cos(pt)*sin(ang),-sin(pt))*FRandom[Puff](0.2,0.8);
	}
	States
	{
	Spawn:
		SPIR QQRRSSTTUU 2 { vel *= 0.95; }
		Stop;
	}
}

Class mkAcolyteFire : Actor
{
	Default
	{
		Scale 0.5;
		Speed 15;
		Radius 2;
		Height 2;
		Translation "0:255=%[0.00,0.00,0.00]:[0.80,2.00,0.80]";
		DamageFunction Random[Acolyte](1,3);
		PROJECTILE;
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
		DamageType 'AcolyteFire';
	}
	States
	{
	Spawn:
		DMFX AABBCC 1 Bright A_SpawnItemEx("mkSmokePoof");
		Loop;
	Death:
		DMFX DEFG 3 Bright;
		Stop;
	}
}

Class mkAcolyteBoom2 : Actor
{
	Default
	{
		RenderStyle "Add";
		Translation "0:255=%[0.00,0.00,0.00]:[0.80,2.00,0.80]";
		Radius 2;
		Height 2;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+FORCEXYBILLBOARD;
		+THRUACTORS;
		Scale 0.7;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		double ang, pt;
		ang = FRandom[Puff](0,360);
		pt = FRandom[Puff](-90,90);
		vel = (cos(pt)*cos(ang),cos(pt)*sin(ang),-sin(pt))*FRandom[Puff](1.2,2.4);
	}
	States
	{
	Spawn:
		WRBL DEF 4 Bright;
		WRBL GHI 4;
		Stop;
	}
}

Class mkAcolyteBoom : Actor
{
	Default
	{
		RenderStyle "Add";
		Translation "0:255=%[0.00,0.00,0.00]:[0.80,2.00,0.80]";
		Speed 1;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		Scale 1.3;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_PlaySound("ClericFlameExplode");
		A_PlaySound("SorcererBallExplode",CHAN_VOICE);
		for ( int i=0; i<5; i++ ) Spawn("mkAcolyteBoom2",pos);
		if ( !args[0] ) return;
		for ( int i=0; i<10; i++ )
		{
			let a = Spawn("mkAcolyteFire",pos);
			a.target = target;
			if ( target ) a.tracer = target.target;
			a.angle = angle+FRandom[Acolyte](-20,20);
			a.pitch = pitch+FRandom[Acolyte](-15,15);
			a.vel = (cos(a.angle)*cos(a.pitch),sin(a.angle)*cos(a.pitch),-sin(a.pitch))*a.speed*FRandom[Acolyte](0.8,1.6);
		}
	}
	States
	{
	Spawn:
		WRBL DEF 4 Bright;
		WRBL GHI 4;
		Stop;
	}
}

Class mkElderAcolyte : Actor
{
	int scnt, dcnt, strafedir;
	int bobstate;

	Default
	{
		//$Title Elder Acolyte
		//$Category Marisa/Monsters
		Scale 1.2;
		Health 500;
		Radius 25;
		Height 78;
		Speed 10;
		PainChance 80;
		MeleeRange 90;
		MONSTER;
		+FLOAT;
		+NOGRAVITY;
		+NOBLOOD;
		+NOTARGET;
		+QUICKTORETALIATE;
		SeeSound "acolyte/see";
		PainSound "acolyte/pain";
		DeathSound "acolyte/death";
		ActiveSound "acolyte/actives";
		Obituary "%o was blown to pieces by an Elder Acolyte.";
		Tag "Elder Acolyte";
	}
	void A_AcolyteAttack()
	{
		if ( !target ) return;
		A_FaceTarget();
		let a = SpawnMissileXYZ(Vec3Angle(radius,angle,45.),target,"mkAcolyteBoom",false);
		a.pitch = BulletSlope();
		if ( Distance3D(target) > radius*2.4 ) a.args[0] = 1;
		else
		{
			target.DamageMobj(self,self,Random[AcolyteBoom](30,40),'AcolyteBoom');
			target.vel.xy += Vec2To(target).unit()*16;
			target.vel.z += 6.;
		}
	}
	void A_AcolyteChase()
	{
		double newz = pos.z - BobSin(bobstate) / 2.;
		bobstate = (bobstate + 4) & 63;
		newz += BobSin(bobstate) / 2.;
		if ( target )
		{
			Vector3 pdiff = level.Vec3Diff(pos,target.pos);
			if ( pdiff.z > 32 ) newz += 3.;
			else if ( pdiff.z < -32 ) newz -= 3.;
		}
		SetOrigin(Vec2OffsetZ(0,0,newz),true);
		A_VileChase();
	}
	void A_AcolyteDecide()
	{
		if ( !target ) return;
		Vector3 sc = level.SphericalCoords(target.pos,pos,(target.angle,target.pitch));
		if ( !Random[AcolyteDecide](0,3) && target.CheckSight(self) && (sc.z < 600) && (abs(sc.x) < 15) && (abs(sc.y) < 15) )
		{
			double ang = AngleTo(target);
			Vector2 dir[2];
			int sdir[2];
			dir[0] = RotateVector((0,1),ang);
			dir[1] = RotateVector((0,-1),ang);
			sdir[0] = 1;
			sdir[1] = -1;
			strafedir = 0;
			int ca = 1, cb = 0;
			if ( Random[AcolyteDecide](0,1) )
			{
				ca = 0;
				cb = 1;
			}
			if ( CheckMove(pos.xy+dir[ca]*speed*2) )
				strafedir = sdir[ca];
			else if ( CheckMove(pos.xy+dir[cb]*speed*2) )
				strafedir = sdir[cb];
			if ( strafedir != 0 )
			{
				SetStateLabel("Strafe");
				return;
			}
		}
	}
	void A_Strafe()
	{
		A_FaceTarget(10);
		Vector2 dir = RotateVector((0,strafedir),angle);
		bool moved = TryMove(pos.xy+dir*speed*1.5,int(maxdropoffheight));
		if ( !moved )
		{
			SetStateLabel("See");
			return;
		}
	}
	void A_DecideBack()
	{
		if ( !target ) return;
		Vector2 dir = RotateVector((-1,0),AngleTo(target));
		if ( CheckMove(pos.xy+dir*speed*3) )
			SetStateLabel("MoveBack");
	}
	void A_TryMoveAway()
	{
		if ( !target ) return;
		if ( Random[AcolyteEscape](0,1) ) return;
		Vector2 dir = RotateVector((-1,0),AngleTo(target));
		if ( CheckMove(pos.xy+dir*speed*3) )
			SetStateLabel("MoveAway");
	}
	void A_MoveAway( bool missile = false )
	{
		A_FaceTarget(30);
		Vector2 dir = RotateVector((-1,0),angle);
		bool moved = TryMove(pos.xy+dir*speed*2.5,int(maxdropoffheight));
		if ( !moved )
		{
			if ( missile ) SetStateLabel("Missile");
			else SetStateLabel("See");
			return;
		}
	}
	States
	{
	Spawn:
		ACOL A 2 A_Look();
		Wait;
	See:
		ACOL A 2 A_VileChase();
		ACOL A 2 A_AcolyteChase();
		ACOL A 2 A_VileChase();
		ACOL B 2 A_VileChase();
		ACOL B 2 A_AcolyteChase();
		ACOL B 2 A_VileChase();
		ACOL A 0 A_AcolyteDecide();
		Loop;
	Heal:
		ACOL A 2 A_PlaySound("BishopAttack");
		ACOL DE 3 Bright;
		ACOL F 4 Bright;
		ACOL ED 3 Bright;
		ACOL A 2;
		Goto See;
	Melee:
		ACOL A 0 A_DecideBack();
	Missile:
		ACOL A 0 A_PlaySound("BishopAttack");
		ACOL A 3 A_FaceTarget();
		ACOL DE 4 Bright A_FaceTarget();
		ACOL F 10 Bright A_AcolyteAttack();
		ACOL ED 4 Bright;
		ACOL A 3;
		Goto See;
	Pain:
		ACOL CCC 2
		{
			let s = Spawn("mkAcolyteAfterImage",pos);
			s.angle = angle;
			s.frame = frame;
			s.vel = vel+(FRandom[AcolytePain](-2,2),FRandom[AcolytePain](-2,2),FRandom[AcolytePain](-1,1));
		}
		ACOL C 6 A_Pain();
		ACOL C 0 A_TryMoveAway();
		Goto See;
	Death:
		ACOL G 6;
		ACOL H 6 Bright A_Scream();
		ACOL I 5 Bright A_NoBlocking();
		ACOL J 5 Bright
		{
			A_PlaySound("SorcererBallExplode",CHAN_WEAPON);
			A_Explode(Random[AcolyteBoom](25,40),120);
		}
		ACOL K 5 Bright;
		ACOL LM 4 Bright;
		ACOL N 4 A_SpawnItemEx("BishopPuff",0,0,40,0,0,-0.5);
		ACOL O 4 A_QueueCorpse();
		ACOL P -1;
		Stop;
	Ice:
		BISH X 5 A_FreezeDeath();
		BISH X 1 A_FreezeDeathChunks();
		Wait;
	Strafe:
		ACOL A 0
		{
			scnt = 0;
			dcnt = Random[AcolyteStrafe](12,16);
			A_FaceTarget();
			A_PlaySound("BishopBlur",CHAN_6);
		}
		ACOL A 1
		{
			scnt++;
			if ( !(scnt%2) )
			{
				let s = Spawn("mkAcolyteAfterImage",pos);
				s.angle = angle;
				s.frame = frame;
			}
			A_Strafe();
			dcnt--;
			if ( dcnt <= 0 ) return ResolveState("See");
			else return ResolveState(null);
		}
		Wait;
	MoveBack:
		ACOL A 0
		{
			scnt = 0;
			dcnt = Random[AcolyteStrafe](9,12);
			A_FaceTarget();
			A_PlaySound("BishopBlur",CHAN_6);
		}
		ACOL A 1
		{
			scnt++;
			if ( !(scnt%2) )
			{
				let s = Spawn("mkAcolyteAfterImage",pos);
				s.angle = angle;
				s.frame = frame;
			}
			A_MoveAway(true);
			dcnt--;
			if ( dcnt <= 0 ) return ResolveState("Missile");
			else return ResolveState(null);
		}
		Wait;
	MoveAway:
		ACOL C 0
		{
			scnt = 0;
			dcnt = Random[AcolyteStrafe](12,15);
			A_FaceTarget();
			A_PlaySound("BishopBlur",CHAN_6);
		}
		ACOL C 1
		{
			scnt++;
			if ( !(scnt%2) )
			{
				let s = Spawn("mkAcolyteAfterImage",pos);
				s.angle = angle;
				s.frame = frame;
			}
			A_MoveAway();
			dcnt--;
			if ( dcnt <= 0 ) return ResolveState("See");
			else return ResolveState(null);
		}
		Wait;
	}
}

Class mkAcolyteAfterImage : Actor
{
	Default
	{
		Scale 1.2;
		RenderStyle "Translucent";
		Alpha 0.5;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
	}
	States
	{
	Spawn:
		ACOL # 1 A_FadeOut(0.03);
		Wait;
	}
}
