// PS: not fully implemented yet
//
// movement is limited to teleporting around strategically
// has a pretty punishing long charge time melee attack for players that stay
// close for too long
// ranged attacks (in order of preference):
//  - seeking fireballs
//  - fire pillars
//  - teleport (has a shockwave, spots use tid 13001)
//  - create acolytes (spawn at map spots 13000, raise door with tag 1300), and apprentices (spawn at map spots 13002)
//  - charged laser (pretty much a master spark)
// melee attack:
//  - if players are within melee range for 6 seconds, localized explosions at feet.
Class mkElderWizard : Actor
{
	private static int ilerp( int a, int b, double theta )
	{
		return int(floor(a*(1.0-theta)+b*theta));
	}

	static void DoLightning( double str )
	{
		let l = ActorIterator.Create(77);
		Actor a;
		while ( a = l.Next() )
		{
			a.args[0] = ilerp(64,224,str);
			a.args[1] = 255;
			a.args[2] = ilerp(64,224,str);
		}
		let s = SectorTagIterator.Create(44);
		int i;
		while ( (i = s.Next()) != -1 )
		{
			level.Sectors[i].SetFade(Color(ilerp(64,224,str),ilerp(128,255,str),ilerp(64,224,str)));
			level.Sectors[i].SetFogDensity(ilerp(0,512,str));
			level.Sectors[i].lightlevel = ilerp(160,255,str);
		}
	}

	Default
	{
		//$Title Viridescent Lord
		//$Category Marisa/Monsters
		Scale 3.0;
		Health 16000;
		Mass int.max;
		Radius 30;
		Height 240;
		DamageFactor "Fire", 0.6;
		DamageFactor "Ice", 0.4;
		DamageFactor "Poison", 0.3;
		BloodColor "Purple";
		Tag "\cdViridescent Lord\c-";
		Obituary "%o succumbed to the Viridescent Lord.";
		HitObituary "%o got too close to the Viridescent Lord.";
		MONSTER;
		+BOSS;
		+DONTMORPH;
		+DONTTHRUST;
		+NOTARGET;
		+NOICEDEATH;
		+FULLVOLACTIVE;
		+DONTDRAIN;
		+NOTELEFRAG;
		+LOOKALLAROUND;
		+INTERPOLATEANGLES;
		+NOPAIN;
		SeeSound "eldrich/see";
		ActiveSound "eldrich/active";
		PainSound "eldrich/pain";
		DeathSound "eldrich/death";
	}
	override int DamageMobj( Actor inflictor, Actor source, int damage, Name mod, int flags, double angle )
	{
		// TODO reduce damage while attacking
		// further reduce the holy damage
		if ( inflictor is 'HolySpirit' ) damage /= 2;
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	void A_DeathFlash()
	{
		A_PlaySound("eldrich/flash",CHAN_WEAPON,attenuation:ATTN_NONE);
		players[consoleplayer].camera.A_SetBlend("80 FF 80",1.,10);
	}
	void A_TeleportFlash()
	{
		A_PlaySound("eldrich/tele",CHAN_WEAPON,attenuation:ATTN_NONE);
		players[consoleplayer].camera.A_SetBlend("80 FF 80",0.5,25);
	}
	States
	{
	Spawn:
		LMWZ A 2
		{
			A_LookEx(LOF_NOJUMP,0,0,0,360);
			if ( target )
			{
				A_QuakeEx(6,6,6,80,0,1200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:400);
				A_PlaySound(SeeSound,CHAN_VOICE,attenuation:ATTN_NONE);
				return ResolveState("See");
			}
			return ResolveState(null);
		}
		Wait;
	See:
		LMWZ A 2 A_FaceTarget(15);
		Wait;
	Death:
		LMWZ E 4;
		LMWZ E 4 A_DeathFlash();
		LMWZ E 20 A_QuakeEx(3,3,3,30,0,1200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:400);
		LMWZ E 4 A_DeathFlash();
		LMWZ E 40 A_QuakeEx(3,3,3,30,0,1200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:400);
		LMWZ E 4 A_DeathFlash();
		LMWZ E 60 A_QuakeEx(3,3,3,30,0,1200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:400);
		LMWZ F 0 A_Scream();
		LMWZ F 20 A_QuakeEx(9,9,9,180,0,1200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:400);
		LMWZ GHIJK 20;
		LMWZ L -1 A_NoBlocking();
		Stop;
	InIce:
		LMWZ E -1;
		Stop;
	OutOfIce:
		LMWZ E 8;
		LMWZ E 40
		{
			A_PlaySound(PainSound,CHAN_VOICE,attenuation:ATTN_NONE);
			A_QuakeEx(3,3,3,20,0,1200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:400);
		}
		Goto Spawn;
	}
}

// Souls-style health bar for a boss
Class mkBossHealthBar : HUDMessageBase
{
	String tname;
	Actor target;
	transient font tfont;
	TextureID bbar_r, bbar_d;
	double alpha;
	DynamicValueInterpolator ihealth;
	int thealth, hmax;
	int oldhealth[10];

	mkBossHealthBar Init( Actor target, String tname )
	{
		self.target = target;
		self.tname = tname;
		alpha = 0.0;
		hmax = thealth = target.health;
		ihealth = DynamicValueInterpolator.Create(thealth,0.25,1,max(8,hmax/100));
		for ( int i=0; i<10; i++ ) oldhealth[i] = thealth;
		bbar_r = TexMan.CheckForTexture("bbar_r",TexMan.Type_Any);
		bbar_d = TexMan.CheckForTexture("bbar_d",TexMan.Type_Any);
		return self;
	}

	override bool Tick()
	{
		if ( target )
		{
			thealth = target.health;
			alpha = min(alpha+0.08,1.0);
		}
		else
		{
			thealth = 0;
			alpha = max(alpha-0.02,0.0);
		}
		oldhealth[0] = thealth;
		if ( thealth > oldhealth[9] )
			for ( int i=9; i>0; i-- )
				oldhealth[i] = thealth;
		ihealth.Update(oldhealth[9]);
		for ( int i=9; i>0; i-- )
			oldhealth[i] = oldhealth[i-1];
		return (!target && (alpha<=0.0));
	}

	override void OnDestroy()
	{
		Super.OnDestroy();
		if ( ihealth ) ihealth.Destroy();
	}

	double GetHealth( bool delay = false )
	{
		double hf;
		if ( delay ) hf = clamp(ihealth.GetValue(),0,hmax)/double(hmax);
		else hf = clamp(thealth,0,hmax)/double(hmax);
		return 256*hf;
	}

	override void Draw( int bottom, int visibility )
	{
		if ( !tfont ) tfont = Font.GetFont('GARGSMAL');
		Vector2 pos, sz;
		[pos, sz] = Screen.VirtualToRealCoords((31,15),(258,8),(320,200),true);
		Screen.Dim("Black",alpha*0.75,int(pos.x),int(pos.y),int(sz.x),int(sz.y));
		Screen.DrawText(tfont,Font.CR_RED,(320-tfont.StringWidth(tname))/2,24,tname,DTA_Bottom320x200,true,DTA_Alpha,alpha);
		Screen.DrawTexture(bbar_d,false,32,16,DTA_Bottom320x200,true,DTA_Alpha,alpha*0.5,DTA_DestWidthF,GetHealth(true));
		Screen.DrawTexture(bbar_r,false,32,16,DTA_Bottom320x200,true,DTA_Alpha,alpha,DTA_DestWidthF,GetHealth());
	}
}

Class mkBossHealthbarHandler : EventHandler
{
	Actor bossenemy;
	ui mkBossHealthBar bossbar;

	override void PostUiTick()
	{
		if ( bossbar && !bossenemy ) bossbar.target = null;
		if ( !bossenemy || bossbar ) return;
		bossbar = new("mkBossHealthBar").Init(bossenemy,bossenemy.GetTag());
		StatusBar.AttachMessage(bossbar);
	}

	// for ACS
	static void SetBoss( int tid )
	{
		let hnd = mkBossHealthbarHandler(EventHandler.Find("mkBossHealthbarHandler"));
		if ( !hnd ) return;
		hnd.bossenemy = ActorIterator.Create(tid).Next();
	}

	static void ClearBoss()
	{
		let hnd = mkBossHealthbarHandler(EventHandler.Find("mkBossHealthbarHandler"));
		if ( !hnd ) return;
		hnd.bossenemy = null;
	}
}
